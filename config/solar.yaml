simulation:
  steps: 12

environment:
  current_month:
    type: int
    value: 0
  distribution_efficiency:
    type: float
    value: 0.9
  grid_price:
    type: float
    value: 0.12
  installation_cost:
    type: float
    value: 15000.0
  maintenance_cost:
    type: float
    value: 200.0

agents:
  household:
    count: 2880
    properties:
      id: int
      location: array, 2, float
      community_id: int
      demand_profile: array, 12, float
      financial_capacity: float
      generation_capacity: array, 12, float
      battery_capacity: float
      battery_charge: float
      grid_consumption: float
      excess_energy: float
      has_solar: boolean
      neighbor_adoption: array, 10, bool
      adoption_propensity: float
      expected_roi: float
      
  community:
    count: 144
    properties:
      id: int
      grid_station_id: int
      household_ids: array, 20, int
      market_price: float
      power_balance: float

  grid_station:
    count: 30
    properties:
      id: int
      max_capacity: float
      current_load: float
      dynamic_price: float
      reliability: float

substeps:
  - name: simulate_solar_generation
    agent: household
    observation:
      func: CalculateSolarGeneration
      name: calculate_generation
      observes:
        - 'household/has_solar'
        - 'household/generation_capacity'
      produces:
        - 'generated_power'
    action:
      name: update_battery_storage
      func: UpdateBatteryStorage
      requires:
        - 'household/battery_capacity'
        - 'household/battery_charge'
        - 'household/demand_profile'
      decides:
        - 'battery_charge'
        - 'excess_energy'
    transition:
      name: update_household_state
      func: UpdateHouseholdState
      updates:
        - 'household/battery_charge'
        - 'household/excess_energy'

  - name: 'market_clearing'
    agent: 'community'
    observation:
      name: aggregate_energy
      func: AggregateEnergy
      observes:
        - 'household/excess_energy'
        - 'household/demand_profile'
        - 'community/household_ids'
        - 'community/grid_station_id'
        - 'grid_station/dynamic_price'
      produces:
        - 'total_supply'
        - 'total_demand'
        - 'household_demand'
        - 'community_grid_prices'
    action:
      name: clear_market
      func: ClearMarket
      requires:
        - 'environment/grid_price'
        - 'environment/distribution_efficiency'
      decides:
        - 'market_price'
        - 'power_balance'
        - 'grid_consumption'
    transition:
      name: update_market_state
      func: UpdateMarketState
      updates:
        - 'household/grid_consumption'
        - 'community/market_price'
        - 'community/power_balance'

  - name: 'grid_integration'
    agent: 'grid_station'
    observation:
      name: monitor_grid_status
      func: MonitorGridStatus
      observes:
        - 'grid_station/current_load'
        - 'grid_station/max_capacity'
        - 'grid_station/reliability'
        - 'community/power_balance'
      produces:
        - 'grid_stability'
        - 'available_capacity'
    action:
      name: adjust_grid_supply
      func: AdjustGridSupply
      requires:
        - 'grid_station/dynamic_price'
        - 'environment/grid_price'
      decides:
        - 'grid_supply'
        - 'updated_price'
    transition:
      name: update_grid_state
      func: UpdateGridState
      updates:
        - 'grid_station/current_load'
        - 'grid_station/dynamic_price'

  - name: 'solar_adoption'
    agent: 'household'
    observation:
      name: evaluate_solar_potential
      func: EvaluateSolarPotential
      observes:
        - 'household/financial_capacity'
        - 'household/demand_profile'
        - 'household/grid_consumption'
        - 'household/location'
        - 'household/neighbor_adoption'
        - 'environment/installation_cost'
        - 'environment/maintenance_cost'
      produces:
        - 'adoption_metrics'
    action:
      name: make_adoption_decision
      func: MakeAdoptionDecision
      requires:
        - 'household/adoption_propensity'
        - 'household/expected_roi'
        - 'household/has_solar'
      decides:
        - 'adoption_decision'
    transition:
      name: update_adoption_state
      func: UpdateAdoptionState
      updates:
        - 'household/has_solar'
        - 'household/location'
        - 'household/financial_capacity'
        - 'household/neighbor_adoption'
